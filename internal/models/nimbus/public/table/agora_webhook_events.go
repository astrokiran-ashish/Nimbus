//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AgoraWebhookEvents = newAgoraWebhookEventsTable("public", "agora_webhook_events", "")

type agoraWebhookEventsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	EventType   postgres.ColumnString
	EventTime   postgres.ColumnTimestampz
	UID         postgres.ColumnString
	ChannelName postgres.ColumnString
	SessionID   postgres.ColumnString
	AppID       postgres.ColumnString
	Payload     postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AgoraWebhookEventsTable struct {
	agoraWebhookEventsTable

	EXCLUDED agoraWebhookEventsTable
}

// AS creates new AgoraWebhookEventsTable with assigned alias
func (a AgoraWebhookEventsTable) AS(alias string) *AgoraWebhookEventsTable {
	return newAgoraWebhookEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AgoraWebhookEventsTable with assigned schema name
func (a AgoraWebhookEventsTable) FromSchema(schemaName string) *AgoraWebhookEventsTable {
	return newAgoraWebhookEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AgoraWebhookEventsTable with assigned table prefix
func (a AgoraWebhookEventsTable) WithPrefix(prefix string) *AgoraWebhookEventsTable {
	return newAgoraWebhookEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AgoraWebhookEventsTable with assigned table suffix
func (a AgoraWebhookEventsTable) WithSuffix(suffix string) *AgoraWebhookEventsTable {
	return newAgoraWebhookEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAgoraWebhookEventsTable(schemaName, tableName, alias string) *AgoraWebhookEventsTable {
	return &AgoraWebhookEventsTable{
		agoraWebhookEventsTable: newAgoraWebhookEventsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newAgoraWebhookEventsTableImpl("", "excluded", ""),
	}
}

func newAgoraWebhookEventsTableImpl(schemaName, tableName, alias string) agoraWebhookEventsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		EventTypeColumn   = postgres.StringColumn("event_type")
		EventTimeColumn   = postgres.TimestampzColumn("event_time")
		UIDColumn         = postgres.StringColumn("uid")
		ChannelNameColumn = postgres.StringColumn("channel_name")
		SessionIDColumn   = postgres.StringColumn("session_id")
		AppIDColumn       = postgres.StringColumn("app_id")
		PayloadColumn     = postgres.StringColumn("payload")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, EventTypeColumn, EventTimeColumn, UIDColumn, ChannelNameColumn, SessionIDColumn, AppIDColumn, PayloadColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{EventTypeColumn, EventTimeColumn, UIDColumn, ChannelNameColumn, SessionIDColumn, AppIDColumn, PayloadColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return agoraWebhookEventsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		EventType:   EventTypeColumn,
		EventTime:   EventTimeColumn,
		UID:         UIDColumn,
		ChannelName: ChannelNameColumn,
		SessionID:   SessionIDColumn,
		AppID:       AppIDColumn,
		Payload:     PayloadColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
