//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserAuth = newUserAuthTable("public", "user_auth", "")

type userAuthTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	UserID           postgres.ColumnString
	SessionID        postgres.ColumnString
	JwtTokenHash     postgres.ColumnString
	RefreshTokenHash postgres.ColumnString
	DeviceDetails    postgres.ColumnString
	Otp              postgres.ColumnInteger
	OtpCreatedAt     postgres.ColumnTimestampz
	OtpValiditySecs  postgres.ColumnInteger
	OtpAttempts      postgres.ColumnInteger
	PhoneNumber      postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz
	ExpiresAt        postgres.ColumnTimestampz
	UpdatedAt        postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserAuthTable struct {
	userAuthTable

	EXCLUDED userAuthTable
}

// AS creates new UserAuthTable with assigned alias
func (a UserAuthTable) AS(alias string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAuthTable with assigned schema name
func (a UserAuthTable) FromSchema(schemaName string) *UserAuthTable {
	return newUserAuthTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAuthTable with assigned table prefix
func (a UserAuthTable) WithPrefix(prefix string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAuthTable with assigned table suffix
func (a UserAuthTable) WithSuffix(suffix string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAuthTable(schemaName, tableName, alias string) *UserAuthTable {
	return &UserAuthTable{
		userAuthTable: newUserAuthTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newUserAuthTableImpl("", "excluded", ""),
	}
}

func newUserAuthTableImpl(schemaName, tableName, alias string) userAuthTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		UserIDColumn           = postgres.StringColumn("user_id")
		SessionIDColumn        = postgres.StringColumn("session_id")
		JwtTokenHashColumn     = postgres.StringColumn("jwt_token_hash")
		RefreshTokenHashColumn = postgres.StringColumn("refresh_token_hash")
		DeviceDetailsColumn    = postgres.StringColumn("device_details")
		OtpColumn              = postgres.IntegerColumn("otp")
		OtpCreatedAtColumn     = postgres.TimestampzColumn("otp_created_at")
		OtpValiditySecsColumn  = postgres.IntegerColumn("otp_validity_secs")
		OtpAttemptsColumn      = postgres.IntegerColumn("otp_attempts")
		PhoneNumberColumn      = postgres.StringColumn("phone_number")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		ExpiresAtColumn        = postgres.TimestampzColumn("expires_at")
		UpdatedAtColumn        = postgres.TimestampzColumn("updated_at")
		allColumns             = postgres.ColumnList{IDColumn, UserIDColumn, SessionIDColumn, JwtTokenHashColumn, RefreshTokenHashColumn, DeviceDetailsColumn, OtpColumn, OtpCreatedAtColumn, OtpValiditySecsColumn, OtpAttemptsColumn, PhoneNumberColumn, CreatedAtColumn, ExpiresAtColumn, UpdatedAtColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, SessionIDColumn, JwtTokenHashColumn, RefreshTokenHashColumn, DeviceDetailsColumn, OtpColumn, OtpCreatedAtColumn, OtpValiditySecsColumn, OtpAttemptsColumn, PhoneNumberColumn, CreatedAtColumn, ExpiresAtColumn, UpdatedAtColumn}
	)

	return userAuthTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		SessionID:        SessionIDColumn,
		JwtTokenHash:     JwtTokenHashColumn,
		RefreshTokenHash: RefreshTokenHashColumn,
		DeviceDetails:    DeviceDetailsColumn,
		Otp:              OtpColumn,
		OtpCreatedAt:     OtpCreatedAtColumn,
		OtpValiditySecs:  OtpValiditySecsColumn,
		OtpAttempts:      OtpAttemptsColumn,
		PhoneNumber:      PhoneNumberColumn,
		CreatedAt:        CreatedAtColumn,
		ExpiresAt:        ExpiresAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
