//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Consultation = newConsultationTable("public", "consultation", "")

type consultationTable struct {
	postgres.Table

	// Columns
	ConsultationID       postgres.ColumnString
	UserID               postgres.ColumnString
	ConsultantID         postgres.ColumnString
	SessionID            postgres.ColumnString
	ConsultationTimeSecs postgres.ColumnInteger
	ConsultationType     postgres.ColumnString
	ConsultationState    postgres.ColumnString
	UserWaitTimeSecs     postgres.ColumnInteger
	AgoraChannel         postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConsultationTable struct {
	consultationTable

	EXCLUDED consultationTable
}

// AS creates new ConsultationTable with assigned alias
func (a ConsultationTable) AS(alias string) *ConsultationTable {
	return newConsultationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConsultationTable with assigned schema name
func (a ConsultationTable) FromSchema(schemaName string) *ConsultationTable {
	return newConsultationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConsultationTable with assigned table prefix
func (a ConsultationTable) WithPrefix(prefix string) *ConsultationTable {
	return newConsultationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConsultationTable with assigned table suffix
func (a ConsultationTable) WithSuffix(suffix string) *ConsultationTable {
	return newConsultationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConsultationTable(schemaName, tableName, alias string) *ConsultationTable {
	return &ConsultationTable{
		consultationTable: newConsultationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newConsultationTableImpl("", "excluded", ""),
	}
}

func newConsultationTableImpl(schemaName, tableName, alias string) consultationTable {
	var (
		ConsultationIDColumn       = postgres.StringColumn("consultation_id")
		UserIDColumn               = postgres.StringColumn("user_id")
		ConsultantIDColumn         = postgres.StringColumn("consultant_id")
		SessionIDColumn            = postgres.StringColumn("session_id")
		ConsultationTimeSecsColumn = postgres.IntegerColumn("consultation_time_secs")
		ConsultationTypeColumn     = postgres.StringColumn("consultation_type")
		ConsultationStateColumn    = postgres.StringColumn("consultation_state")
		UserWaitTimeSecsColumn     = postgres.IntegerColumn("user_wait_time_secs")
		AgoraChannelColumn         = postgres.StringColumn("agora_channel")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		allColumns                 = postgres.ColumnList{ConsultationIDColumn, UserIDColumn, ConsultantIDColumn, SessionIDColumn, ConsultationTimeSecsColumn, ConsultationTypeColumn, ConsultationStateColumn, UserWaitTimeSecsColumn, AgoraChannelColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns             = postgres.ColumnList{UserIDColumn, ConsultantIDColumn, SessionIDColumn, ConsultationTimeSecsColumn, ConsultationTypeColumn, ConsultationStateColumn, UserWaitTimeSecsColumn, AgoraChannelColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return consultationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConsultationID:       ConsultationIDColumn,
		UserID:               UserIDColumn,
		ConsultantID:         ConsultantIDColumn,
		SessionID:            SessionIDColumn,
		ConsultationTimeSecs: ConsultationTimeSecsColumn,
		ConsultationType:     ConsultationTypeColumn,
		ConsultationState:    ConsultationStateColumn,
		UserWaitTimeSecs:     UserWaitTimeSecsColumn,
		AgoraChannel:         AgoraChannelColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
